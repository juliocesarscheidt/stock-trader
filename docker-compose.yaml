version: '3.4'

services:
  stock-crawler:
    container_name: stock-crawler
    hostname: stock-crawler
    image: juliocesarmidia/stock-crawler:latest
    build:
      context: ./stock-crawler
    environment:
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
      MONGO_DATABASE: ${MONGO_DATABASE}
      RABBITMQ_URI: amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@rabbitmq/?heartbeat=30
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    networks:
      - subnet_0
    restart: on-failure

  stock-api:
    container_name: stock-api
    hostname: stock-api
    image: juliocesarmidia/stock-api:latest
    build:
      context: ./stock-api
    ports:
      - 5050:5050
    environment:
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
      MONGO_DATABASE: ${MONGO_DATABASE}
      RABBITMQ_URI: amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@rabbitmq/?heartbeat=30
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY}
      AWS_XRAY_DAEMON_ADDRESS: xray-daemon:2000
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      FLASK_ENV: development
      FLASK_APP: /usr/src/app/stock/entrypoint/flask_app.py
      FLASK_DEBUG: 0
    entrypoint:
      - flask
      - run
      - --host=0.0.0.0
      - --port=5050
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - ./stock-api/src:/usr/src/app:rw

  stock-ui:
    container_name: stock-ui
    hostname: stock-ui
    image: juliocesarmidia/stock-ui:latest
    build:
      context: ./stock-ui
      dockerfile: Development.Dockerfile
    ports:
      - 8080:8080
    environment:
      NODE_ENV: development
      VUE_APP_API_URI: http://stock-api:5050
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - ./stock-ui:/app:rw
      - stock-ui-node-modules:/app/node_modules:rw

  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo:5.0
    command: mongod --config /etc/mongo/mongod.conf --storageEngine wiredTiger
    ports:
      - 28017:27017
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - mongo-data:/data/db:rw
      - mongo-home:/home/mongodb:rw
      - ./mongo/mongod.conf:/etc/mongo/mongod.conf:ro
      - ./mongo/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
      - ./mongo/init.js:/init.js:ro

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: juliocesarmidia/rabbitmq:latest
    build:
      context: ./rabbitmq
    ports:
      - 5872:5672
      - 15872:15672
    environment:
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY}
    networks:
      - subnet_0
    restart: on-failure

  xray-daemon:
    container_name: xray-daemon
    hostname: xray-daemon
    image: juliocesarmidia/xray-daemon:latest
    build:
      context: ./xray-daemon
    ports:
      - 2000:2000/tcp
      - 2000:2000/udp
    environment:
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks:
      - subnet_0
    restart: on-failure

networks:
  subnet_0:
    driver: bridge

volumes:
  mongo-data: {}
  mongo-home: {}
  stock-ui-node-modules: {}

secrets: {}
